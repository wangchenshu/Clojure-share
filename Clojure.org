* [[https://clojure.org/][Clojure]]

** [[https://zh.wikipedia.org/wiki/Clojure][介紹]]
Clojure（發音類似"closure"）是一套現代的Lisp語言的動態語言版。它是一個函數式多用途的語言。
Clojure可以執行於Java虛擬機，通用語言運行時以及JavaScript引擎之上。與其他Lisp一樣，Clojure認為[[https://zh.wikipedia.org/wiki/%E5%90%8C%E5%83%8F%E6%80%A7][同像性 ]]，同時擁有複雜的巨集。
Clojure最新的穩定版本是1.7，發布於2015年6月30日。第一個穩定版本1.0於2009年5月4日發布。
Clojure是一個在Eclipse公共許可證下發行的自由軟體。目前其開發進程是社區主導的，在作者Rich Hickey以一個「終身的仁慈獨裁者」的身份監督下進行。

** 語言哲學
因為 Hickey 希望有一個提供函數式編程和並發的現代Lisp實現，所以他開發了 Clojure 語言。

** 語法
Clojure 的語法和其他的Lisp一樣，都是建立在 S-expression 之上。

** [[http://www.tryclj.com/][Try Clojure]]

** 範例
Hello world:
#+NAME: hello.clj
#+BEGIN_SRC Clojure

(println "Hello, World!")

#+END_SRC

** 開始之前
Clojure是一個相對來說很新的語言。在經過一些年的努力之後，Clojure的第一版是在2007年10月16日發布的。 
Clojure的主要部分被稱為 "Clojure proper" 或者 "core"。你可以從這裡下載： http://clojure.org/downloads。 
你也可以使用 Leiningen。最新的源代碼可以從它的Git庫下載。

*** [[https://github.com/clojure-emacs/clojure-mode][Install clojure-mode on Emacs]]
#+NAME: 
#+BEGIN_SRC

M-x package-install [RET] clojure-mode [RET]

#+END_SRC

*** [[http://leiningen.org/][Leiningen]]
for automating Clojure projects without setting your hair on fire

**** Install
1. Download the [[https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein][lein script]] (or on Windows [[https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein.bat][lein.bat]])
2. Place it on your $PATH where your shell can find it (eg. ~/bin)
3. Set it to be executable (chmod a+x ~/bin/lein)
4. Run it (lein) and it will download the self-install package

You can check your [[https://github.com/technomancy/leiningen/wiki/Packaging][package manager]] as well, but be sure you get version 2.x. 
There's also an [[http://leiningen-win-installer.djpowell.net/][installer for Windows users]].

*** [[https://clojuredocs.org/][ClojureDocs]]
ClojureDocs is a community-powered documentation and examples 
repository for the [[http://clojure.org/][Clojure programming language]].

*** [[http://clojurekoans.com/][Clojure Koans]]
**** 1. Install Java
#+NAME: hello.clj
#+BEGIN_SRC Clojure

$ java -version
java version "1.8.0_66"
Java(TM) SE Runtime Environment (build 1.8.0_66-b17)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b17, mixed mode)

#+END_SRC

**** 2. Install the Koans
#+NAME: hello.clj
#+BEGIN_SRC Clojure

$ git clone git://github.com/functional-koans/clojure-koans.git

#+END_SRC

**** 3. Run the First Koan
#+NAME:
#+BEGIN_SRC Clojure

$ lein koan run

#+END_SRC

** Clojure 並發
Clojure 處理並發是採用 STM (Software transactional memory)

*** [[https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E4%BA%8B%E5%8A%A1%E5%86%85%E5%AD%98][軟體事務記憶體]]
在電腦科學中，軟體事務記憶體（英語：Software transactional memory，縮寫為STM），又譯為交易記憶體，
軟體交換式記憶體，是一種並行控制機制，模擬資料庫事務的機制，控制在平行計算時對共享記憶體的存取控制。
它是鎖的一種替代機制。在STM中，一個事務指的是一段讀、寫共享記憶體的代碼。
這些讀寫操作在邏輯上是一個獨立的單元，其中間狀態對於其它的事務而言，是不可見的。

*** 效能
與現在許多多執行緒應用程式廣泛使用的鎖機制不同，STM是一種非常樂觀的並行控制機制：
一個執行緒獨立完成對共享記憶體的修改，完全忽略可能會有其它的執行緒存在，但是執行緒在記錄檔中記錄對共享內容的每一個讀寫動作。
其他的並行控制一般是在進行寫操作時來保證與其他事務的一致性（不能修改已經被別的事務修改過的共享資料），STM在完成一個事務之後，
再驗證其它執行緒有沒有並行的對共享記憶體進行或修改，從而保證事務是完整的。因此，STM事務的最後一個操作是驗證，如果驗證通過
則提交，否則取消，導致所有以前進行的修改動作回滾。如果一個事務不能夠提交，一般的，事務將回滾，並且從入口開始重新執行。

採用這種樂觀策略可以增加並行效能：任何執行緒無需等待一個資源，多個執行緒可以並列而且安全的修改同一資料結構的多個部分（如果採用鎖，它們一般在同一個鎖的保護之下）。
除了在事務失敗後需要重試而增加開銷之外，在現實世界中，由於衝突是很罕見的，因此，實際上可以帶來效能的提升。尤其是在多處理器的情況下。
不過，在一些實踐中，在較少CPU（1-4）的系統上，基於STM的應用程式相對於一些精心調節的基於Lock的應用程式而言，會有一定的效能損失。
主要的原因是在STM事務中，需要維持log，以及額外的花在提交事務上的時間。不過，即使在這種情況下，效能也不會低於50%。 相對而言，STM擁護者認為STM帶來的優勢更為明顯。

理論上，在最糟糕的情況下，當n個並行事務同時執行，他們需要n倍的記憶體和處理器，實際的需要取決於具體的實作細節（比如說一個事務可以儘早的失敗以避免後續額外的開銷）。
在某些應用場景下，基於Lock機制的演算法會比基於STM機制的演算法更好。

***  類型
**** Vars
#+NAME:
#+BEGIN_SRC
;; def
;; 全域變數
user=> (def x 1)
#'user/x
user=> x
1

;; let
;; 區域變數
user=> (defn say-hello []
  #_=>   (let [name "Walter"]
  #_=>     (prn name)))
#'user/say-hello
user=> (say-hello)
"Walter"
nil

;; binding
user=> (def ^:dynamic x 1)
#'user/x
user=> (def ^:dynamic y 1)
#'user/y
user=> (+ x y)
2
user=> (binding [x 2 y 3]
  #_=>   (+ x y))
5
user=> (+ x y)
2
#+END_SRC

**** Refs
#+NAME:
#+BEGIN_SRC
;; ref
user=> (def x (ref 20))
#'user/x
user=> x
#object[clojure.lang.Ref 0x7ca6a4a2 {:status :ready, :val 20}]
;; 用 @ 取值
user=> @x
20
;; 用 deref 取值
user=> (deref x)
20

;; validator
user=> (def validate-num
  #_=>   #(pos? %))
#'user/validate-num

user=> (def score (ref 0 :validator validate-num))

CompilerException java.lang.IllegalStateException: Invalid reference state, compiling:(form-init1574102811712753977.clj:1:12)

user=> (def score (ref 2 :validator validate-num))
#'user/score
user=> @score
2

;; dosync and ref-set
user=> (ref-set score 3)

IllegalStateException No transaction running  clojure.lang.LockingTransaction.getEx (LockingTransaction.java:208)

user=> (dosync (ref-set score 0))

IllegalStateException Invalid reference state  clojure.lang.ARef.validate (ARef.java:33)

user=> (dosync (ref-set score 3))
3

;; alter and commute
user=> (dosync (alter score inc))
4
user=> @score
4
commute函數是是對alter的優化，commute可以同時進行修改（並不影響ref最終的值）。
通常情況下，一般優先使用alter，除非在遇到明顯的性能瓶頸並且對順序不是那麼關心的時候，
可以考慮用commute替換。
#+END_SRC

**** Atom
#+NAME:
#+BEGIN_SRC
;; 有點像 Java 的 Atomic

;; reset!
user=> (def score (atom 94))
#'user/score
user=> (reset! score 95)
95
user=> @score
95

;; compare-and-set!
user=> (compare-and-set! score 95 96)
true
user=> @score
96
user=> (compare-and-set! score 95 96)
false
user=> @score
96

;; swap!
;; 會一直執行直到成功為止
user=> (swap! score inc)
97
user=> @score
97
#+END_SRC

**** Agent
#+NAME:
#+BEGIN_SRC
;; Agents 是用來把一些事情放到另外一個線程來做（一般不需要事務控制的），
;; 用來控制狀態的異步更新。
user=> (def score (agent 94))
#'user/score
user=> @score
94
user=> (send score inc)
#object[clojure.lang.Agent 0x3da32114 {:status :ready, :val 95}]
user=> @score
95
user=> (send-off score inc)
#object[clojure.lang.Agent 0x3da32114 {:status :ready, :val 96}]
user=> @score
96

;; send和send-off的區別在於，send是將任務交給一個固定大小的線程池執行(默認大小是CPU核數+2)。
;; 因此send執行的任務最好不要有阻塞的操作。而send-off則使用沒有大小限制（取決於內存）的線程池。
;; 因此，send-off比較適合任務有阻塞的操作，如IO讀寫之類。注意，所有的agent是共用這些線程池。

;; 參考 http://wuchong.me/blog/2015/11/06/learn-clojure-3-concurrent/
#+END_SRC

** Web Framework
*** [[https://github.com/ring-clojure/ring][Ring]]
Clojure HTTP server abstraction.

*** [[https://github.com/weavejester/compojure][Compojure]]
Compojure is a small routing library for [[https://github.com/ring-clojure/ring][Ring]] that allows web applications 
to be composed of small, independent parts.

*** [[https://github.com/luminus-framework][luminus-framework]]
**** [[https://github.com/luminus-framework/luminus][Luminus]]
[[http://www.luminusweb.net/][Luminus]] is a Clojure micro-framework based on a set of lightweight libraries. 
It aims to provide a robust, scalable, and easy to use platform. 
With Luminus you can focus on developing your app the way you want without any distractions.

**** [[https://github.com/luminus-framework/luminus-template][Luminus-Template]]
A Leiningen template for projects using [[http://www.luminusweb.net/][Luminus]].
The template initializes a base Luminus application.

*** [[http://www.http-kit.org/client.html][HTTP kit]]
HTTP client/server for Clojure.

HTTP Kit is a minimalist, efficient, Ring-compatible HTTP client/server for Clojure.
It uses a event-driven architecture to support highly concurrent a/synchronous web applications.
Feature a unified API for WebSocket and HTTP long polling/streaming.

#+NAME:
#+BEGIN_SRC
[http-kit "2.1.18"] ; Add to your project.clj.
#+END_SRC
